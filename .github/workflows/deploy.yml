# Terraform configuration for Calndr Backend Infrastructure
name: Deploy to AWS ECS for Staging and Production

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - 'Dockerfile'
      - '.github/workflows/deploy.yml'
      
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - 'Dockerfile'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: calndr-backend
  CONTAINER_NAME: calndr-app
  PROJECT_NAME: calndr
  

jobs:
  # Test and build job
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
      environment: ${{ steps.env.outputs.environment }}
      cluster-name: ${{ steps.env.outputs.cluster-name }}
      service-name: ${{ steps.env.outputs.service-name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine environment and infrastructure names
      id: env
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "cluster-name=${PROJECT_NAME}-staging-cluster" >> $GITHUB_OUTPUT
          echo "service-name=${PROJECT_NAME}-staging-service" >> $GITHUB_OUTPUT
        elif [[ ${{ github.ref }} == 'refs/heads/develop' ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "cluster-name=${PROJECT_NAME}-staging-cluster" >> $GITHUB_OUTPUT
          echo "service-name=${PROJECT_NAME}-staging-service" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "cluster-name=${PROJECT_NAME}-staging-cluster" >> $GITHUB_OUTPUT
          echo "service-name=${PROJECT_NAME}-staging-service" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run tests
      run: |
        cd backend
        # Add your test commands here
        # python -m pytest tests/ -v
        echo "Tests passed"
    
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ steps.env.outputs.environment }}
      run: |
        echo "Building Docker image..."
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT-latest
        
        echo "Pushing Docker image..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT-latest
        
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Image built and pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"


  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-and-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Check if ECS cluster exists
      id: check-cluster
      env:
        CLUSTER_NAME: ${{ needs.test-and-build.outputs.cluster-name }}
      run: |
        if aws ecs describe-clusters --clusters $CLUSTER_NAME --region ${{ env.AWS_REGION }} --query 'clusters[?status==`ACTIVE`]' --output text | grep -q $CLUSTER_NAME; then
          echo "cluster-exists=true" >> $GITHUB_OUTPUT
          echo "Cluster $CLUSTER_NAME exists and is active"
        else
          echo "cluster-exists=false" >> $GITHUB_OUTPUT
          echo "Cluster $CLUSTER_NAME does not exist or is not active"
        fi
    
    - name: Deploy to ECS
      if: steps.check-cluster.outputs.cluster-exists == 'true'
      env:
        CLUSTER_NAME: ${{ needs.test-and-build.outputs.cluster-name }}
        SERVICE_NAME: ${{ needs.test-and-build.outputs.service-name }}
      run: |
        echo "Deploying to staging environment..."
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $SERVICE_NAME \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
    
    - name: Wait for deployment to complete
      if: steps.check-cluster.outputs.cluster-exists == 'true'
      env:
        CLUSTER_NAME: ${{ needs.test-and-build.outputs.cluster-name }}
        SERVICE_NAME: ${{ needs.test-and-build.outputs.service-name }}
      run: |
        echo "Waiting for deployment to complete..."
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME \
          --region ${{ env.AWS_REGION }}
    
    - name: Run health check
      if: steps.check-cluster.outputs.cluster-exists == 'true'
      run: |
        echo "Running health check..."
        # Add your staging health check URL
        curl -f https://staging.calndr.club/health || exit 1
    
    - name: Sync backend to calndrclub repository
      if: steps.check-cluster.outputs.cluster-exists == 'true'
      env:
        GH_PAT: ${{ secrets.CALNDRCLUB_PAT }}
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        # Configure git to use PAT for authentication
        git config --global url."https://$GH_PAT@github.com/".insteadOf "https://github.com/"
        chmod +x ./scripts/sync-backend-to-calndrclub.sh
        CALNDRCLUB_DIR="$GITHUB_WORKSPACE/calndrclub" ./scripts/sync-backend-to-calndrclub.sh
    
    - name: Infrastructure not deployed
      if: steps.check-cluster.outputs.cluster-exists == 'false'
      run: |
        echo "::warning::ECS cluster ${{ needs.test-and-build.outputs.cluster-name }} does not exist."
        echo "::warning::Please deploy the infrastructure using Terraform before running this workflow."
        echo "::warning::See DEPLOYMENT_GUIDE.md for instructions."

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-and-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Check if ECS cluster exists
      id: check-cluster
      env:
        CLUSTER_NAME: ${{ needs.test-and-build.outputs.cluster-name }}
      run: |
        if aws ecs describe-clusters --clusters $CLUSTER_NAME --region ${{ env.AWS_REGION }} --query 'clusters[?status==`ACTIVE`]' --output text | grep -q $CLUSTER_NAME; then
          echo "cluster-exists=true" >> $GITHUB_OUTPUT
          echo "Cluster $CLUSTER_NAME exists and is active"
        else
          echo "cluster-exists=false" >> $GITHUB_OUTPUT
          echo "Cluster $CLUSTER_NAME does not exist or is not active"
        fi
    
    - name: Deploy to ECS
      if: steps.check-cluster.outputs.cluster-exists == 'true'
      env:
        CLUSTER_NAME: ${{ needs.test-and-build.outputs.cluster-name }}
        SERVICE_NAME: ${{ needs.test-and-build.outputs.service-name }}
      run: |
        echo "Deploying to production environment..."
        aws ecs update-service \
          --cluster $CLUSTER_NAME \
          --service $SERVICE_NAME \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
    
    - name: Wait for deployment to complete
      if: steps.check-cluster.outputs.cluster-exists == 'true'
      env:
        CLUSTER_NAME: ${{ needs.test-and-build.outputs.cluster-name }}
        SERVICE_NAME: ${{ needs.test-and-build.outputs.service-name }}
      run: |
        echo "Waiting for deployment to complete..."
        aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME \
          --region ${{ env.AWS_REGION }}
    
    - name: Run health check
      if: steps.check-cluster.outputs.cluster-exists == 'true'
      run: |
        echo "Running health check..."
        curl -f https://calndr.club/health || exit 1
    
    # - name: Sync backend to calndrclub repository
    #   if: steps.check-cluster.outputs.cluster-exists == 'true'
    #   env:
    #     GH_PAT: ${{ secrets.CALNDRCLUB_PAT }}
    #   run: |
    #     git config --global user.name "GitHub Actions"
    #     git config --global user.email "actions@github.com"
    #     # Configure git to use PAT for authentication
    #     git config --global url."https://$GH_PAT@github.com/".insteadOf "https://github.com/"
    #     chmod +x ./scripts/sync-backend-to-calndrclub.sh
    #     CALNDRCLUB_DIR="$GITHUB_WORKSPACE/calndrclub" ./scripts/sync-backend-to-calndrclub.sh
    
    - name: Create GitHub release
      if: github.ref == 'refs/heads/main' && steps.check-cluster.outputs.cluster-exists == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from commit ${{ github.sha }}
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
    
    - name: Infrastructure not deployed
      if: steps.check-cluster.outputs.cluster-exists == 'false'
      run: |
        echo "::warning::ECS cluster ${{ needs.test-and-build.outputs.cluster-name }} does not exist."
        echo "::warning::Please deploy the infrastructure using Terraform before running this workflow."
        echo "::warning::See DEPLOYMENT_GUIDE.md for instructions."

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [test-and-build]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && github.event_name == 'push'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Cleanup old ECR images
      run: |
        echo "Cleaning up old ECR images..."
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region ${{ env.AWS_REGION }} > /dev/null 2>&1 || exit 0
        
        # Keep only the last 10 images
        aws ecr list-images \
          --repository-name $ECR_REPOSITORY \
          --filter tagStatus=UNTAGGED \
          --query 'imageIds[?imageDigest!=null]|[10:]' \
          --output json \
          --region ${{ env.AWS_REGION }} | \
        jq '.[] | select(.imageDigest != null)' | \
        jq -s '.' | \
        jq 'if length > 0 then . else empty end' | \
        xargs -r aws ecr batch-delete-image \
          --repository-name $ECR_REPOSITORY \
          --image-ids file:///dev/stdin \
          --region ${{ env.AWS_REGION }} || echo "No old images to delete" 