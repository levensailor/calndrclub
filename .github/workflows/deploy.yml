name: Deploy to AWS ECS

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - 'Dockerfile'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - 'Dockerfile'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: calndr-backend
  CONTAINER_NAME: calndr-app

jobs:
  # Test and build job
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
      environment: ${{ steps.env.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine environment
      id: env
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        elif [[ ${{ github.ref }} == 'refs/heads/develop' ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run tests
      run: |
        cd backend
        # Add your test commands here
        # python -m pytest tests/ -v
        echo "Tests passed"
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-${{ github.run_id }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ steps.env.outputs.environment }}
      run: |
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT-latest
        
        echo "Pushing Docker image..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT-latest
        
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Image built and pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  # Security scan job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-Security-${{ github.run_id }}
    
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.test-and-build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-Deploy-Staging-${{ github.run_id }}
    
    - name: Deploy to ECS
      run: |
        echo "Deploying to staging environment..."
        aws ecs update-service \
          --cluster calndr-staging-cluster \
          --service calndr-staging-service \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
    
    - name: Wait for deployment to complete
      run: |
        echo "Waiting for deployment to complete..."
        aws ecs wait services-stable \
          --cluster calndr-staging-cluster \
          --services calndr-staging-service \
          --region ${{ env.AWS_REGION }}
    
    - name: Run health check
      run: |
        echo "Running health check..."
        # Add your staging health check URL
        curl -f https://staging.calndr.club/health || exit 1

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-Deploy-Production-${{ github.run_id }}
    
    - name: Deploy to ECS
      run: |
        echo "Deploying to production environment..."
        aws ecs update-service \
          --cluster calndr-production-cluster \
          --service calndr-production-service \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
    
    - name: Wait for deployment to complete
      run: |
        echo "Waiting for deployment to complete..."
        aws ecs wait services-stable \
          --cluster calndr-production-cluster \
          --services calndr-production-service \
          --region ${{ env.AWS_REGION }}
    
    - name: Run health check
      run: |
        echo "Running health check..."
        curl -f https://calndr.club/health || exit 1
    
    - name: Create GitHub release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from commit ${{ github.sha }}
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-Cleanup-${{ github.run_id }}
    
    - name: Cleanup old ECR images
      run: |
        echo "Cleaning up old ECR images..."
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region ${{ env.AWS_REGION }} > /dev/null 2>&1 || exit 0
        
        # Keep only the last 10 images
        aws ecr list-images \
          --repository-name $ECR_REPOSITORY \
          --filter tagStatus=UNTAGGED \
          --query 'imageIds[?imageDigest!=null]|[10:]' \
          --output json \
          --region ${{ env.AWS_REGION }} | \
        jq '.[] | select(.imageDigest != null)' | \
        jq -s '.' | \
        jq 'if length > 0 then . else empty end' | \
        xargs -r aws ecr batch-delete-image \
          --repository-name $ECR_REPOSITORY \
          --image-ids file:///dev/stdin \
          --region ${{ env.AWS_REGION }} || echo "No old images to delete" 